--Active: 1697297346954 @ @127 .0 .0 .1 @3306 @world_layoffs
--TENTANG DATASET : 
--Perusahaan-perusahaan ECH di seluruh dunia sedang berjuang melawan perlambatan ekonomi. Belanja konsumen yang lambat, suku bunga yang lebih tinggi oleh bank sentral dan dolar yang kuat di luar negeri mengisyaratkan kemungkinan resesi dan perusahaan teknologi telah mulai memberhentikan karyawan. Perlambatan ekonomi ini membuat Meta baru-baru ini memecat 13% tenaga kerjanya, yang berjumlah lebih dari 11.000 karyawan. Kumpulan data ini dibuat dengan harapan memungkinkan untuk menganalisis gejolak teknologi baru-baru ini dan menemukan wawasan yang berguna.


--DATA CLEANING, Proses mengidentifikasi dan mengoreksi atau membuang data yang salah dari dataset. Ini melibatkan :
-- menghapus duplikasi, normalisasi data, validasi data, penanganan nilai yang hilang, dan standarisasi pengurutan data. 


#A MENGECEK DAN MENGHAPUS DUPLIKASI DATA
--1. Membuat Tabel Staging
--Tujuan: Membuat tabel sementara(staging) untuk membersihkan data tanpa mengubah data asli.
CREATE TABLE world_layoffs.layoffs_staging LIKE world_layoffs.layoffs;
-- --Membuat tabel baru layoffs_staging yang strukturnya sama persis dengan tabel asli layoffs.

INSERT INTO layoffs_staging SELECT * FROM world_layoffs.layoffs;
--Mengisi tabel layoffs_staging dengan data dari tabel asli layoffs

--2. Menghapus Duplikasi Data
--Tujuan: Mengidentifikasi dan menghapus entri data yang duplikat.

--Memeriksa Duplikasi:
SELECT
    company,
    industry,
    total_laid_off,
    'date',
    ROW_NUMBER() OVER (
        PARTITION BY
            company,
            industry,
            total_laid_off,
            'date'
    )
FROM world_layoffs.layoffs_staging;
--Menghitung nomor baris(row number) untuk setiap kombinasi kolom company, industry, total_laid_off, dan date.Jika ada duplikasi, nomor barisnya akan lebih dari 1

--Menampilkan Duplikasi:
SELECT *
FROM (
        SELECT
            company, industry, total_laid_off, `date`, ROW_NUMBER() OVER (
                PARTITION BY
                    company, industry, total_laid_off, `date`
            ) AS row_num
        FROM world_layoffs.layoffs_staging
    ) duplicates
WHERE
    row_num > 1;

SELECT * FROM world_layoffs.layoffs_staging WHERE company = 'Oda';

--Menampilkan semua baris yang memiliki nomor baris lebih dari 1(duplikat).

--Menghapus Duplikasi:
-- -- Kolom ini akan digunakan untuk mengidentifikasi duplikat
ALTER TABLE world_layoffs.layoffs_staging ADD row_num INT;

SELECT * FROM world_layoffs.layoffs_staging;

-- Tabel ini adalah salinan sementara dari layoffs_staging dengan kolom row_num.
CREATE TABLE `world_layoffs`.`layoffs_staging2` (
    `company` text,
    `location` text,
    `industry` text,
    `total_laid_off` INT,
    `percentage_laid_off` text,
    `date` text,
    `stage` text,
    `country` text,
    `funds_raised_millions` int,
    row_num INT
);

-- Data dari layoffs_staging dipindahkan ke layoffs_staging2.
-- Fungsi ROW_NUMBER() digunakan untuk memberi nomor baris unik pada setiap kombinasi nilai dari kolom-kolom kunci.
INSERT INTO
    `world_layoffs`.`layoffs_staging2` (
        `company`,
        `location`,
        `industry`,
        `total_laid_off`,
        `percentage_laid_off`,
        `date`,
        `stage`,
        `country`,
        `funds_raised_millions`,
        `row_num`
    )
SELECT
    `company`,
    `location`,
    `industry`,
    `total_laid_off`,
    `percentage_laid_off`,
    `date`,
    `stage`,
    `country`,
    `funds_raised_millions`,
    ROW_NUMBER() OVER (
        PARTITION BY
            company,
            location,
            industry,
            total_laid_off,
            percentage_laid_off,
            `date`,
            stage,
            country,
            funds_raised_millions
    ) AS row_num
FROM world_layoffs.layoffs_staging;

-- Perintah ini memilih semua baris dari layoffs_staging2 di mana row_num lebih besar dari 1, menunjukkan bahwa baris tersebut adalah duplikat.
SELECT * FROM layoffs_staging2 WHERE row_num > 1;

-- Perintah ini menghapus baris duplikat (dengan row_num > 1) dari layoffs_staging2.
DELETE FROM world_layoffs.layoffs_staging2 WHERE row_num > 1;

--Memeriksa hasil:
-- Baris yang tersisa di layoffs_staging2 seharusnya unik.

SELECT * FROM layoffs_staging2;

#B. STANDARDIZE DATA
SELECT * FROM layoffs_staging2;

--Menangani Nilai Kosong dan Tidak Valid pada kolom industry:
-- Mengidentifikasi nilai unik dalam kolom industry.
SELECT DISTINCT
    industry
FROM world_layoffs.layoffs_staging2
ORDER BY industry;

-- Menemukan baris dengan nilai industry NULL atau kosong ('').
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE
    industry IS NULL
    OR industry = ''
ORDER BY industry;

--Mengisi Nilai industry yang Kosong Berdasarkan Nama Perusahaan:
-- Menampilkan contoh baris dengan nama perusahaan yang bermasalah (misalnya, 'Bally' dan 'airbnb').
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE
    company LIKE 'Bally%';

SELECT *
FROM world_layoffs.layoffs_staging2
WHERE
    company LIKE 'airbnb%';

-- Mengganti nilai kosong ('') dalam kolom industry menjadi NULL untuk mempermudah manipulasi.
UPDATE world_layoffs.layoffs_staging2
SET
    industry = NULL
WHERE
    industry = '';

-- Mengisi nilai NULL pada industry dengan nilai yang sesuai dari baris lain yang memiliki nama perusahaan yang sama.
UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2 ON t1.company = t2.company
SET
    t1.industry = t2.industry
WHERE
    t1.industry IS NULL
    AND t2.industry IS NOT NULL;

-- Memeriksa kembali apakah masih ada nilai NULL atau kosong pada industry.
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE
    industry IS NULL
    OR industry = '';

--Menstandarisasi Nilai pada kolom industry:
-- Menampilkan kembali nilai unik dalam kolom industry.
SELECT DISTINCT
    industry
FROM world_layoffs.layoffs_staging2
ORDER BY industry;

-- Mengubah variasi 'Crypto Currency' dan 'CryptoCurrency' menjadi 'Crypto'.
UPDATE layoffs_staging2
SET
    industry = 'Crypto'
WHERE
    industry IN (
        'Crypto Currency',
        'CryptoCurrency'
    );

-- Memeriksa kembali nilai unik dalam kolom industry setelah standardisasi.
SELECT DISTINCT
    industry
FROM world_layoffs.layoffs_staging2
ORDER BY industry;

--Menstandarisasi Nilai pada kolom country:
-- Mengidentifikasi nilai unik dalam kolom country dan menemukan variasi ('United States' dan 'United States.').
SELECT DISTINCT
    country
FROM world_layoffs.layoffs_staging2
ORDER BY country;

---- Menghilangkan karakter '.' dari akhir nilai country.
UPDATE layoffs_staging2
SET
    country = TRIM(
        TRAILING '.'
        FROM country
    );

-- Memeriksa kembali nilai unik country setelah standardisasi.
SELECT DISTINCT
    country
FROM world_layoffs.layoffs_staging2
ORDER BY country;

#B Look at Null Values
--Kode ini berfokus pada penanganan nilai NULL pada tabel layoffs_staging2. Secara khusus, tujuannya adalah:
--Memeriksa dan mengevaluasi nilai NULL.
--Menghapus kolom yang tidak lagi dibutuhkan (row_num).


--Memeriksa Nilai NULL: 
-- Menampilkan semua baris di mana total_laid_off bernilai NULL.
SELECT total_laid_off 
FROM world_layoffs.layoffs_staging2
WHERE
    total_laid_off IS NULL;

-- Menampilkan semua baris di mana total_laid_off dan percentage_laid_off keduanya NULL.\
SELECT *
FROM world_layoffs.layoffs_staging2
WHERE
    total_laid_off IS NULL
    AND percentage_laid_off IS NULL;

--Nilai null dalam total_laid_off, percentage_laid_off, dan funds_raised_millions semuanya terlihat normal.
-- Kesimpulannya adalah nilai NULL pada kolom total_laid_off, percentage_laid_off, dan funds_raised_millions dianggap valid dan tidak perlu diubah.
-- Nilai NULL akan dibiarkan karena dianggap berguna untuk analisis data eksplorasi (EDA).

--Menghapus Baris Tidak Berguna:
-- Menghapus baris di mana total_laid_off dan percentage_laid_off keduanya bernilai NULL, karena baris tersebut dianggap tidak memiliki informasi yang berguna.

SELECT  *FROM layoffs_staging2 ;
